""" Create version header and tracker file if missing """
import datetime
import os
import subprocess
import sys
import json

Import("env")

## DO NOT EDIT THIS FILE, edit version file if you want to start from a different version
#
#  version_increment_pre.py - Simple versioning script for Platformio
#
#  Copyright (C) 2022  Davide Perini
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy of
#  this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  You should have received a copy of the MIT License along with this program.
#  If not, see <https://opensource.org/licenses/MIT/>.
#

VERSION_FILE = 'version'
VERSION_HEADER = 'Version.h'
VERSION_PREFIX = '0.1.'
VERSION_PATCH_NUMBER = 0


def pio_info():
  return  f"""
#define PIOENV\t\"{env['PIOENV']}\"
#define PIOPLATFORM\t\"{env['PIOPLATFORM']}\"
#define PROJECT_DIR\t\"{env['PROJECT_DIR']}\"
#define BUILD_TYPE\t\"{env['BUILD_TYPE']}\"
#define BOARD\t\"{env['BOARD']}\"
  """

def is_git_directory(path='.'):
    return subprocess.call(['git', '-C', path, 'status'],
                           stderr=subprocess.STDOUT, stdout=open(os.devnull, 'w')) == 0

def c_escape(string):
    return string # FIXME
    return json.dumps(string)

def collect_git_info():
    s = pio_info()

    if not is_git_directory("."):
        s += "#define GIT_REPO_PRESENT\t0\n"
        return s

    revision = (
        subprocess.check_output(
            ["git", "describe", "--always", "--dirty", "--tags"])
        .strip()
        .decode("utf-8")
    )
    author = (
        subprocess.check_output(
            ["git", "show", "-s", "--format=format:%an", "HEAD"])
        .strip()
        .decode("utf-8")
    )
    info = (
        subprocess.check_output(
            ["git", "show", "-s", "--format=format:%s", "HEAD"])
        .strip()
        .decode("utf-8")
    )
    branch = (
        subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"])
        .strip()
        .decode("utf-8")
    )
    commitdate = (
        subprocess.check_output(
            ["git", "show", "-s", "--format=format:%cD", "HEAD"])
        .strip()
        .decode("utf-8")
    )
    s += f"""
#define GIT_REPO_PRESENT  1
#define GIT_REV\t\"{c_escape(revision)}\"
#define GIT_AUTHOR\t\"{c_escape(author)}\"
#define GIT_SUBJECT\t\"{c_escape(info)}\"
#define GIT_BRANCH\t\"{c_escape(branch)}\"
#define GIT_COMMIT_DATE\t\"{c_escape(commitdate)}\"\n
    """
    return s

if not os.path.exists(".version_no_increment"):
    try:
        with open(VERSION_FILE) as FILE:
            VERSION_PATCH_NUMBER = FILE.readline()
            VERSION_PREFIX = VERSION_PATCH_NUMBER[0:VERSION_PATCH_NUMBER.rindex('.')+1]
            VERSION_PATCH_NUMBER = int(VERSION_PATCH_NUMBER[VERSION_PATCH_NUMBER.rindex('.')+1:])
            if not os.path.exists(".version_no_increment_update_date"):
                VERSION_PATCH_NUMBER = VERSION_PATCH_NUMBER + 1
    except:
        print('No version file found or incorrect data in it. Starting from 0.1.0')
        VERSION_PATCH_NUMBER = 0
    with open(VERSION_FILE, 'w+') as FILE:
        FILE.write(VERSION_PREFIX + str(VERSION_PATCH_NUMBER))
        print('Build number: {}'.format(VERSION_PREFIX + str(VERSION_PATCH_NUMBER)))

    HEADER_FILE = """
#pragma once

// AUTO GENERATED FILE, DO NOT EDIT
#ifndef VERSION
#define VERSION "{}"
#endif
#ifndef BUILD_TIMESTAMP
#define BUILD_TIMESTAMP "{}"
#endif
    """.format(VERSION_PREFIX + str(VERSION_PATCH_NUMBER), datetime.datetime.now())
    HEADER_FILE += collect_git_info()
    if os.environ.get('PLATFORMIO_INCLUDE_DIR') is not None:
        VERSION_HEADER = os.environ.get('PLATFORMIO_INCLUDE_DIR') + os.sep + VERSION_HEADER
    elif os.path.exists("include"):
        VERSION_HEADER = "include" + os.sep + VERSION_HEADER
    else:
        PROJECT_DIR = env.subst("$PROJECT_DIR")
        os.mkdir(PROJECT_DIR + os.sep + "include")
        VERSION_HEADER = "include" + os.sep + VERSION_HEADER

    with open(VERSION_HEADER, 'w+') as FILE:
        FILE.write(HEADER_FILE)
    
    env.Replace(PROGNAME="firmware_%s" % (VERSION_PREFIX + str(VERSION_PATCH_NUMBER)))

    open('.version_no_increment', 'a').close()
else:
    if os.path.exists("version"):
        FILE = open(VERSION_FILE)
        VERSION_NUMBER = FILE.readline()
        print('Build number: {} (waiting for upload before next increment)'.format(str(VERSION_NUMBER)))

        env.Replace(PROGNAME="firmware_%s" % VERSION_NUMBER)
    else:
        print('No version file found or incorrect data in it!!')



